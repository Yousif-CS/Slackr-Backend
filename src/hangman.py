'''
This file contains the functions necessary for the implementation of the hangman game,
which should be able to run within each channel of the slackr
'''
import random
import pickle
import string

word_file = "/usr/share/dict/words"
WORDS = open(word_file).read().splitlines()
MAX_LIVES = 10

def generate_word():
    '''
    Generates a random word from /usr/share/dict/words
    that is 10 letters long or less, and returns it.
    '''
    word = random.choice(WORDS)
    while len(word) > 10:
        word = random.choice(WORDS)
    
    return list(word.upper())

def start_game(channel_id, target_word):
    '''
    Creates a temporary database in which to store the word to guess,
    and the letters of the alphabet as well as whether each letter has been guessed.
    Unique to each channel; assuming only one game per channel at a time.
    Turns on hangman mode in state.py
    '''

    HANGMAN_DATA = {
        "target_word": target_word,
        "user_guess": ['?' for letter in target_word],
        "letters_guessed": dict.fromkeys(string.ascii_uppercase, False), 
        # dictionary with alphabet letters as keys and values default to False
        "lives_remaining": MAX_LIVES,
    }

    assert len(HANGMAN_DATA['user_guess']) == len(HANGMAN_DATA['target_word'])

    return HANGMAN_DATA

def guess(letter, user_guess, target_word):
    '''
    Inputs: letter guessed by the user, target_word (list) generated by the backend

    When the user guesses whether a letter is in the word,
    inform the user that:
    a. the guess is correct
    b. the guess is incorrect
    c. the guess is invalid (not alpha or not single char)
    '''

    if len(letter) == 0 or len(letter) > 1:
        raise ValueError
    elif letter in target_word:
        i = 0
        while i < len(target_word):
            if target_word[i] == letter.upper():
                user_guess[i] = letter.upper()
        return {
            "user_guess": user_guess,
            "correct_guess": True,
        }   
    else:
        return {
            "user_guess": user_guess,
            "correct_guess": False,
        }   

def end_game():
    '''
    resets the hangman dictinoary within the channel
    '''
    